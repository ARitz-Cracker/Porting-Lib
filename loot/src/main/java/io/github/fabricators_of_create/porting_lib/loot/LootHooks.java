package io.github.fabricators_of_create.porting_lib.loot;

import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.enchantment.EnchantmentHelper;
import net.minecraft.world.level.storage.loot.LootContext;

import javax.annotation.Nullable;

import java.util.List;

public class LootHooks {
	/**
	 * All loot table drops should be passed to this function so that mod added effects
	 * (e.g. smelting enchantments) can be processed.
	 *
	 * @param list The loot generated
	 * @param context The loot context that generated that loot
	 * @return The modified list
	 *
	 * @deprecated Use {@link #modifyLoot(ResourceLocation, ObjectArrayList, LootContext)} instead.
	 *
	 * @implNote This method will use the {@linkplain LootTableIdCondition#UNKNOWN_LOOT_TABLE
	 *           unknown loot table marker} when redirecting.
	 */
	@Deprecated
	public static List<ItemStack> modifyLoot(List<ItemStack> list, LootContext context) {
		return modifyLoot(LootTableIdCondition.UNKNOWN_LOOT_TABLE, ObjectArrayList.wrap((ItemStack[]) list.toArray()), context);
	}

	/**
	 * Handles the modification of loot table drops via the registered Global Loot Modifiers,
	 * so that custom effects can be processed.
	 *
	 * <p>All loot-table generated loot should be passed to this function.</p>
	 *
	 * @param lootTableId The ID of the loot table currently being queried
	 * @param generatedLoot The loot generated by the loot table
	 * @param context The loot context that generated the loot, unmodified
	 * @return The modified list of drops
	 *
	 * @apiNote The given context will be modified by this method to also store the ID of the
	 *          loot table being queried.
	 */
	public static ObjectArrayList<ItemStack> modifyLoot(ResourceLocation lootTableId, ObjectArrayList<ItemStack> generatedLoot, LootContext context) {
		context.setQueriedLootTableId(lootTableId); // In case the ID was set via copy constructor, this will be ignored: intended
		LootModifierManager man = LootModifierManager.getLootModifierManager();
		for (IGlobalLootModifier mod : man.getAllLootMods()) {
			generatedLoot = mod.apply(generatedLoot, context);
		}
		return generatedLoot;
	}

	public static int getLootingLevel(Entity target, @Nullable Entity killer, @Nullable DamageSource cause) {
		if (killer instanceof LivingEntity)
			return EnchantmentHelper.getMobLooting((LivingEntity)killer);
		return 0;
	}
}
