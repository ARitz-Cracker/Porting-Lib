import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import java.util.jar.JarFile
import java.util.zip.ZipFile

//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "fabric-loom" version "0.13.12"
	id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
	id "org.quiltmc.quilt-mappings-on-loom" version "4.2.0" // Quilt Mappings, for parameters and javadoc. Also hashed mojmap.
//	id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
	id "org.ajoberstar.grgit" version "4.1.1"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
def patch = buildNumber != null ? buildNumber : "99999"

version = version.replace("<patch>", patch)

if (grgit != null) {
	version += "+${grgit.getBranch().current().name}"
} else {
	version += "+custom_unknown"
}


def getSubprojectVersion(project) {
	return version
}

def moduleDependencies(Project project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }

	depNames.iterator().forEachRemaining {
		Project dependProject = findProject(":$it")
		project.loom {
			interfaceInjection {
				interfaceInjectionSourceSets.add(dependProject.sourceSets.main)
			}
		}
	}
	project.dependencies {
		deps.each {
			api(include(it))
		}
	}
}

File globalAccessWidener = file("src/main/resources/porting_lib.accesswidener")


allprojects {
	apply plugin: "fabric-loom"
	apply plugin: "maven-publish"
	group = "io.github.fabricators_of_create.Porting-Lib"

	repositories {
		mavenLocal()
		maven { url = "https://hephaestus.dev/release" }
		maven { url = "https://api.modrinth.com/maven" }
		maven { url = "https://maven.bai.lol" }
		maven { url = "https://maven.terraformersmc.com/releases/" }
		maven { url = "https://maven.parchmentmc.org" }
		maven { url = "https://maven.shedaniel.me/" }
		maven { url = "https://mvn.devos.one/releases/" }
		maven { url = "https://mvn.devos.one/snapshots/" }
		maven { url = "https://maven.wispforest.io" }
		maven { url = "https://cursemaven.com" }
		maven {
			url = "https://jitpack.io"
			content {
				includeGroup("com.github.Chocohead")
				includeGroup("com.github.LlamaLad7")
			}
		}
		mavenCentral()
	}

	dependencies {
		// dev environment
		minecraft("com.mojang:minecraft:${project.minecraft_version}")
		mappings(loom.layered {
			it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_version}:v2"))
			it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
			it.officialMojangMappings { nameSyntheticMembers = false }
		})
		modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
		modLocalRuntime("maven.modrinth:lazydfu:0.1.3")
//		modLocalRuntime("maven.modrinth:suggestionproviderfabric:1.0.1")
		//	modLocalRuntime("mcjty.theoneprobe:theoneprobe-fabric:${top_version}")
//		modLocalRuntime("maven.modrinth:lithium:${project.lithium_version}")
//		modLocalRuntime("maven.modrinth:vmp-fabric:${project.vmp_version}")
		//	modLocalRuntime("maven.modrinth:iris:${project.iris_version}")
		//	modLocalRuntime("dev.monarkhes:myron:1.6.3+1.18.1") { transitive = false }
		modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" }

		// dependencies
		modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
		modImplementation(include("io.github.tropheusj:serialization-hooks:${project.serialization_hooks_version}"))
		api(include("com.github.LlamaLad7:MixinExtras:0.0.12"))
		annotationProcessor(include("com.github.LlamaLad7:MixinExtras:0.0.12"))

		modImplementation(include("com.github.Chocohead:Fabric-ASM:v2.3"))
		implementation("javax.annotation:javax.annotation-api:1.3.2")
		implementation("com.google.code.findbugs:jsr305:3.0.2")
	}

	// todo why?
//	allprojects.each { p ->
//		loom.mods.register(p.name) {
//			sourceSet p.sourceSets.main
//		}
//	}

	tasks.withType(ProcessResources).configureEach {
		Map<String, String> properties = new HashMap<>()
		properties.put("version", project.version)
		properties.put("loader_version", project.loader_version)
		properties.put("fabric_version", project.fabric_version)
		properties.put("minecraft_version", project.minecraft_version)
		properties.put("java_version", sourceCompatibility)
		properties.put("class_5124", project.wtf_gradle)
		properties.put("class_56", project.wtf_gradle2)

		properties.forEach((k, v) -> inputs.property(k, v))

		filesMatching("fabric.mod.json") {
			expand properties
		}
	}

	task buildOrPublish {
		group = "build"
		String mavenUser = System.getenv().MAVEN_USER
		if (mavenUser != null && !mavenUser.isEmpty()) {
			dependsOn(tasks.getByName("publish"))
			println "prepared for publish"
		} else {
			dependsOn(tasks.getByName("build"))
			println "prepared for build"
		}
	}

	loom {
		accessWidenerPath = globalAccessWidener
	}

	// todo why?
//	tasks.withType(AbstractArchiveTask) {
//		preserveFileTimestamps = false
//		reproducibleFileOrder = true
//	}

	// todo why?
//	tasks.withType(GenerateModuleMetadata) {
//		enabled = false
//	}

	// fixme uncommenting this causes everything to explode, but this might be important
//	tasks.withType(JavaCompile).configureEach {
//		it.options.setRelease(Integer.parseInt(sourceCompatibility))
//	}

	java {
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}" }
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}

		repositories {
			maven {
				url = "https://mvn.devos.one/snapshots/"
				credentials {
					username = System.getenv().MAVEN_USER
					password = System.getenv().MAVEN_PASS
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

sourceSets {
	allModules {
		for (Project p : subprojects) {
			def main = p.sourceSets.main
			compileClasspath += main.compileClasspath + main.output
			runtimeClasspath += main.runtimeClasspath + main.output
		}
	}
}

loom {
	sourceSets {
		main {
			resources {
				srcDir("src/generated/resources")
				exclude("src/generated/resources/.cache")
			}
		}
	}

	runs {
		// make default run configs run all modules
		client {
			client()
			name "Minecraft Client"
			source sourceSets.allModules
		}
		server {
			server()
			name "Minecraft Server"
			source sourceSets.allModules
		}
		// todo figure out datagen
		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=porting_lib"
			// from ae2

			runDir "build/datagen"
		}
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			// include all modules inside the fat jar
			nestedJars.from project("${it.path}").tasks.getByName("remapJar")
		}
	}
}

// todo why?
//javadoc {
//	options {
//		source = "17"
//		encoding = "UTF-8"
//		charSet = "UTF-8"
//		memberLevel = JavadocMemberLevel.PACKAGE
//		links(
//				"https://guava.dev/releases/21.0/api/docs/",
//				"https://asm.ow2.io/javadoc/",
//				"https://docs.oracle.com/javase/8/docs/api/",
//				"http://jenkins.liteloader.com/job/Mixin/javadoc/",
//				"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/"
//				// Need to add minecraft jd publication etc once there is one available
//		)
//		// Disable the crazy super-strict doclint tool in Java 8
//		addStringOption("Xdoclint:none", "-quiet")
//	}
//
//	allprojects.each {
//		if (it.getName() == "networking") return
//
//		source(it.sourceSets.main.allJava.srcDirs)
//	}
//
//	classpath = files(sourceSets.main.compileClasspath)
//	include("**/api/**")
//	failOnError false
//}

//task javadocJar(type: Jar) {
//	dependsOn javadoc
//	from javadoc.destinationDir
//	//Set as `fatjavadoc` to prevent an ide form trying to use this javadoc, over using the modules javadoc
//	archiveClassifier = "fatjavadoc"
//}

//build.dependsOn javadocJar

//subprojects.each {
//	remapJar.dependsOn("${it.path}:remapJar")
//}

//subprojects {
//	publishing {
//		publications {
//			mavenJava(MavenPublication) {
//				artifact(remapJar) {
//					builtBy(remapJar)
//				}
//
//				artifact(remapSourcesJar) {
//					builtBy remapSourcesJar
//				}
//			}
//		}
//	}
//
//	loom.disableDeprecatedPomGeneration(publishing.publications.mavenJava)
//
//	javadoc.enabled = false
//}

//void setupRepositories(RepositoryHandler repositories) {
//	//repositories.mavenLocal() // uncomment for testing
//	repositories.maven {
//		url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
//		credentials {
//			username = System.getenv().MAVEN_USER
//			password = System.getenv().MAVEN_PASS
//		}
//		authentication {
//			basic(BasicAuthentication)
//		}
//	}
//}

//task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
//	input = jar.archiveFile
//	archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
//	addNestedDependencies = false
//}
//build.dependsOn remapMavenJar

